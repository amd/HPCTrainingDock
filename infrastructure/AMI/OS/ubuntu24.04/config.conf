# handle OS image configuration, FinalizeBase tasks using
# the fb_ prefix here.

fb_last:	fb_cleanup osinst_last
	touch fb_last

fb_fstab:	osinst_last
	# fstab
	touch ${TARGET}/etc/fstab
	echo "proc  /proc proc defaults 0 0" 	   >> ${TARGET}/etc/fstab
	echo "sysfs /sys sysfs defaults 0 0" 	   >> ${TARGET}/etc/fstab
	#
	# NFS bits in case they will be used
	#echo "rpc_pipefs /var/lib/nfs/rpc_pipefs rpc_pipefs defaults 0 0" \
	#	>> ${TARGET}/etc/fstab
	#echo "nfsd /proc/fs/nfsd nfsd defaults 0 0" >> ${TARGET}/etc/fstab
	#mkdir -p ${TARGET}/var/lib/nfs/rpc_pipefs
	mkdir -p ${TARGET}/run/log/journal

	# remove odd fstab banner
	sed -i 's|# UNCONFIGURED FSTAB FOR BASE SYSTEM||g' ${TARGET}/etc/fstab

	# build mount points we will use later
	chroot ${TARGET} mkdir -p /data /mnt

	touch fb_fstab


fb_init: fb_fstab
	#
	# fix tmpfs parameters.  Use a maximum of 5% ram, not 25%
	echo "#" >> ${TARGET}/etc/default/tmpfs
	echo "# fix TMPFS_SIZE = 5%VM" >> ${TARGET}/etc/default/tmpfs
	echo "TMPFS_SIZE=5%VM" >> ${TARGET}/etc/default/tmpfs
	#
	# inittab:  this is legacy, and not likely needed.  Will be deprecated
	# in a future release.
	echo "T0:12345:respawn:/sbin/getty -L ttyS0 115200 vt100" \
		>> ${TARGET}/etc/inittab
	echo "T1:12345:respawn:/sbin/getty -L ttyS1 115200 vt100" \
		>> ${TARGET}/etc/inittab
	echo "T2:12345:respawn:/sbin/getty -L ttyS2 115200 vt100" \
		>> ${TARGET}/etc/inittab

	touch fb_init


fb_limits: fb_init
	# limits:  base linux limits are too low for most heavy utilization use cases
	echo "*	soft nofile  1048576" >> ${TARGET}/etc/security/limits.d/files.conf
	echo "* hard nofile  2097152" >> ${TARGET}/etc/security/limits.d/files.conf
	echo "*	soft memlock 4294967296 " >> ${TARGET}/etc/security/limits.d/files.conf
	echo "* hard memlock 8589934592" >> ${TARGET}/etc/security/limits.d/files.conf

	#
	# set limits in /etc/pam.d/...
	echo "session    required   pam_limits.so" \
		>> ${TARGET}/etc/pam.d/common-session
	echo "session    required   pam_limits.so" \
		>> ${TARGET}/etc/pam.d/common-session-noninteractive
	echo "session    required   pam_limits.so" \
		>> ${TARGET}/etc/pam.d/login
	echo "session    required   pam_limits.so" \
		>> ${TARGET}/etc/pam.d/sshd
		touch fb_limits


fb_blacklist: 	fb_limits
	#
	# blacklist drivers
	echo "blacklist evbug"    >> ${TARGET}/etc/modprobe.d/blacklist.conf
	echo "blacklist acpi_pad" >> ${TARGET}/etc/modprobe.d/blacklist.conf
	echo "blacklist nvidia"   >> ${TARGET}/etc/modprobe.d/blacklist.conf
	echo "blacklist amdgpu"	  >> ${TARGET}/etc/modprobe.d/blacklist.conf
	
	touch fb_blacklist

fb_systemd:	fb_blacklist
	# fix some systemd timeout brokenness
	sed -i 's|^#DefaultTimeoutStartSec=.*|DefaultTimeoutStartSec=15|g'		\
	 		${TARGET}/etc/systemd/system.conf
	sed -i 's|^#DefaultTimeoutStopSec=.*|DefaultTimeoutStopSec=15|g' 			\
			${TARGET}/etc/systemd/system.conf
	sed -i 's|^#ShutdownWatchdogSec=.*|ShutdownWatchdogSec=2min|g' 				\
			${TARGET}/etc/systemd/system.conf

	# fix systemd journaling.  Yeah, really
	sed -i 's|^#Storage=.*|Storage=persistent|g' ${TARGET}/etc/systemd/journald.conf
	sed -i 's|^#SystemMaxUse=.*|SystemMaxUse=512M|g' ${TARGET}/etc/systemd/journald.conf
	sed -i 's|^#RuntimeMaxUse=.*|RuntimeMaxUse=512M|g' ${TARGET}/etc/systemd/journald.conf
	sed -i 's|^#ForwardToSyslog=.*|ForwardToSyslog=yes|g' ${TARGET}/etc/systemd/journald.conf
	#sed -i 's|||g' ${TARGET}/etc/systemd/journald.conf

	#
	# fix the INSANE logind.conf per user directory size ... hard code it to 1GB
	sed -i 's|^#RuntimeDirectorySize=.*|RuntimeDirectorySize=1024M|g' ${TARGET}/etc/systemd/logind.conf
	#

	# fix the INSANE logind.conf KillUserProcesses problem, which nukes nohup/tmux/screen ...
	sed -i 's|^#KillUserProcesses=.*|KillUserProcesses=no|g' ${TARGET}/etc/systemd/logind.conf

	# force multiple virtual consoles (because the default doesn't work :(  )
	sed -i 's|^#NAutoVTs=.*|NAutoVTs=9|g' ${TARGET}/etc/systemd/logind.conf
	sed -i 's|^#ReserveVT=.*|ReserveVT=6|g' ${TARGET}/etc/systemd/logind.conf
	
	touch fb_systemd

fb_initramfs: fb_systemd
	#
	# increase compression level of zstd.  Defaults to 1 for some reason
	echo COMPRESSLEVEL=15 >> ${TARGET}/etc/initramfs-tools/initramfs.conf
	touch fb_initramfs

fb_serial_console:	 fb_initramfs
	#
	#
	# add in permissions for serial port login
	echo "ttyS0" >> ${TARGET}/etc/securetty
	echo "ttyS1" >> ${TARGET}/etc/securetty
	echo "ttyS2" >> ${TARGET}/etc/securetty
	echo "ttyS3" >> ${TARGET}/etc/securetty

	#
	# turn on serial port gettys
	chroot ${TARGET} systemctl enable serial-getty@ttyS0
	chroot ${TARGET} systemctl enable serial-getty@ttyS1
	chroot ${TARGET} systemctl enable serial-getty@ttyS2
	# this generates log spam ... but ... you kinda need it for remote mangement.  Turn these
	# off with boot options disablettyS$X where $X={0,1,2} as needed.
	touch fb_serial_console


fb_user_pass:	fb_serial_console

	# add able user (AMD Basic Linux Environment)
	chroot ${TARGET} useradd -m amd
	#
	# root user password
ifeq ($(RANDOMROOTPW),1)
	# generate random passwd
	echo "root:"`pwgen -N 1 16` > ${TARGET}/root/rootpw
	echo "amd:"`pwgen -N 1 16` > ${TARGET}/home/amd/amdpw
else
	echo "root:AmdGpu!" > ${TARGET}/root/rootpw
	echo "amd:AbleMI123!" > ${TARGET}/home/amd/amdpw
endif
	chmod 600 ${TARGET}/root/rootpw ${TARGET}/home/amd/amdpw
	chroot ${TARGET} chown -R amd:amd /home/amd

	cat ${TARGET}/root/rootpw | chroot ${TARGET} chpasswd
	chroot ${TARGET} ssh-keygen -b 4096 -t rsa -f /root/.ssh/id_rsa -q -N ""
	chroot ${TARGET} ssh-keygen  -t ed25519 -f /root/.ssh/id_ed25519 -q -N ""

	mkdir -p ${TARGET}/home/amd/.ssh
	chmod 600 ${TARGET}/home/amd/amdpw
	chroot ${TARGET} ssh-keygen -b 4096 -t rsa -f /home/amd/.ssh/id_rsa -q -N ""
	chroot ${TARGET} ssh-keygen  -t ed25519 -f /home/amd/.ssh/id_ed25519 -q -N ""
	chroot ${TARGET} chown -R amd:amd /home/amd/

	# enable sudo for user amd
	# next line would enable passwordless sudo for user ami
	# echo "ami ALL=(ALL:ALL) NOPASSWD: ALL" > ${TARGET}/etc/sudoers.d/ami
	# 
	# Instead, just enable sudo access for amd
	chroot ${TARGET} usermod -aG sudo amd

	# add user able into the render and video groups (needed for using GPU)
	chroot ${TARGET} usermod -aG render,video amd

	touch fb_user_pass


fb_hostname:	fb_user_pass
	#
	# hostname, motd, etc.

	cat motd.ami > ${TARGET}/etc/motd

	# clear the autogeneration motd on TARGET
	rm -f ${TARGET}/etc/update-motd.d/*
	
	echo "AMD-Machine-Image" > ${TARGET}/etc/hostname
	echo "127.0.0.2 AMD-Machine-Image" >>  ${TARGET}/etc/hosts

	touch fb_hostname


fb_network:	fb_hostname
	#
	# fix /etc/network/interfaces:  currently not working as there
	# is no guarantee that the interfaces on the build host will be reflected
	# on the bootable nodes
	# cp networking/gen_interfaces.pl ${TARGET}/root
	# chroot ${TARGET} /root/gen_interfaces.pl 
	# mv -fv ${TARGET}/interfaces_generated ${TARGET}/etc/network/interfaces


	# this part will be controversial, but ...
	# turn off base networking at boot
	chroot ${TARGET} systemctl disable networking.service
	# we turn on networking after the OS is fully up.  We don't
	# want networking stopping the boot

	touch fb_network


fb_postbootconf: fb_network
	# setup the tune on boot script

	cp boot/able-ramboot-init.d ${TARGET}/etc/init.d/able
	cp boot/able-ramboot.service ${TARGET}/etc/systemd/system
	chmod +x ${TARGET}/etc/init.d/able
	chroot ${TARGET} systemctl daemon-reload
	chroot ${TARGET} systemctl enable able
	touch fb_postbootconf


fb_chrony: fb_postbootconf
	#
	# fix /etc/chrony.conf to point to internal-install for chrony
	cp config/chrony.conf ${TARGET}/etc/chrony/chrony.conf
	touch fb_chrony

fb_disk:	fb_chrony
	# if we are writing an image file, then
	# add / and /boot/efi partitions to the /etc/fstab and
	# lay down an efi bootloader and configure it

ifeq (${DEST},file)
	# configure fstab, based upon the hardwired /dev/loop\d+p(\d) where
	# the capture is 1 or 3. 1->/boot/efi, 3->/
	cp scripts/build_fstab.pl ${TARGET}/root
	chmod +x ${TARGET}/root/build_fstab.pl
	chroot ${TARGET} /root/build_fstab.pl

	# install the uefi booting bits
	export DEBIAN_FRONTEND=noninteractive ; chroot ${TARGET} apt-get -y \
		install grub-efi efi-shell-x64 efitools systemd-boot-efi

	chroot ${TARGET} /usr/sbin/grub-install --target=x86_64-efi ${LODEV}

	# fix some grub defaults in /etc/defauly/grub
	sed -i 's|GRUB_TIMEOUT_STYLE=hidden|#GRUB_TIMEOUT_STYLE=hidden|g' ${TARGET}/etc/default/grub
	sed -i 's|GRUB_TIMEOUT=.*|GRUB_TIMEOUT=15|g' ${TARGET}/etc/default/grub
	sed -i 's|GRUB_CMDLINE_LINUX_DEFAULT=.*|GRUB_CMDLINE_LINUX_DEFAULT="verbose simplenet=1 consoleblank=0 mpt3sas.max_queue_depth=1000  console=ttyS0,115200n8 pci=realloc=off amd_iommu=on iommu=pt console=tty0"|g' ${TARGET}/etc/default/grub
	sed -i 's|^#GRUB_TERMINAL=console|GRUB_TERMINAL=console|g' ${TARGET}/etc/default/grub
	sed -i 's|^#GRUB_GFXMODE=.*|GRUB_GFXMODE=1920x1200|g' ${TARGET}/etc/default/grub

	# now update grub
	chroot ${TARGET} /usr/sbin/update-grub

	# the disk image should now be bootable
	
endif
	touch fb_disk


fb_sysctl: fb_disk
	#
	# system tunables, adjust as needed, these have
	# worked well in the past for high performance systems
	cat config/sysctl.conf >> ${TARGET}/etc/sysctl.conf

	touch fb_sysctl


fb_policy:	fb_sysctl
	#
	# turn off the policy bits in the ramdisk
	echo '#!/bin/bash' > ${TARGET}/usr/sbin/policy-rc.d
	echo "exit 0" >> ${TARGET}/usr/sbin/policy-rc.d
	chmod +x ${TARGET}/usr/sbin/policy-rc.d

	touch fb_policy


fb_packages: fb_policy
	cp -fv OS/${DISTRO}/sources.list ${TARGET}/etc/apt
	cd packages ; $(MAKE) all
	touch fb_packages

fb_cleanup: fb_packages
	chroot ${TARGET} apt-get clean all
	chroot ${TARGET} apt -y autoremove
	rm -rf ${TARGET}/var/cache/apt
	touch fb_cleanup
