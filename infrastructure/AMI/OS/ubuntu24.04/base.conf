# handle OS image installation, OsInst tasks using
# the osinst_ prefix here.

# point to web URLs for .debs
include OS/${DISTRO}/distro_urls.conf

osinst_last: osinst_clean
		touch osinst_last

osinst_init: able_machine_image_build_1
	# base
	echo "HWE=${HWE}\nDISTRO=${DISTRO}\nTARGET=${TARGET}" >> ${TARGET}/kernel.data
	debootstrap --arch amd64 		\
		noble						\
		${TARGET}  					\
		${BASE_OS}

	# core
	
	cp -fv OS/${DISTRO}/sources.list ${TARGET}/etc/apt/sources.list    
	touch osinst_init

osinst_base: osinst_init

	mount --bind /dev  ${TARGET}/dev
	mount --bind /dev/pts ${TARGET}/dev/pts
	mount --bind /proc ${TARGET}/proc
	mount --bind /sys  ${TARGET}/sys

	export DEBIAN_FRONTEND=noninteractive ; chroot ${TARGET} apt-get -y \
		update

	#
	cp -f config/locale.gen ${TARGET}/etc
	echo "LC_ALL=en_US.UTF-8" >> ${TARGET}/etc/environment
	echo "LANG=en_US.UTF-8" >> ${TARGET}/etc/environment
	chroot ${TARGET} locale-gen en_US en_US.UTF-8
	DEBIAN_FRONTEND=noninteractive chroot ${TARGET} dpkg-reconfigure \
	         locales

	export DEBIAN_FRONTEND=noninteractive ; chroot ${TARGET} apt-get -y \
		install locales initramfs-tools mdadm ssh vim gawk openipmi 	\
		ipmiutil binutils bash schedtool hwloc-nox sysfsutils       	\
		pigz pbzip2 curl cpufrequtils zstd lbzip2 numactl wget      	\
		numatop acpi acpitool acpid util-linux coreutils usbutils udev  \
		apt-transport-https vlan lshw net-tools ethtool    	\
		i2c-tools libudev1 chrony ifenslave bridge-utils	    		\
		sudo less vim hwloc-nox htop iptraf-ng bc lsof dstat 	\
		libssl-dev libgnutls28-dev ipmitool lsb-release rsync	    	\
		libudev-dev isc-dhcp-client ansible-core ansible aria2 jq 		\
		linux-base pwgen figlet

	export DEBIAN_FRONTEND=noninteractive ; chroot ${TARGET} apt-get -y \
		install systemd-bootchart lm-sensors forkstat cpustat       	\
		ethstatus libpam-systemd  module-assistant bash-completion 		\
		coreutils zip rlwrap p7zip-full unzip 7zip p7zip unrar pdsh 	\
		pbzip2 debootstick

	cp -fv OS/${DISTRO}/sources.list ${TARGET}/etc/apt
	export DEBIAN_FRONTEND=noninteractive ; chroot ${TARGET} apt-get    \
		update

	#
	mkdir -p ${TARGET}/etc/mdadm
	touch ${TARGET}/etc/mdadm/mdadm.conf

	# parallel gzip, bzip2 
	#   make sure you replace gzip/bzip2 with these for initramfs builds
	#   as they are much faster
	mv ${TARGET}/bin/gzip ${TARGET}/bin/gzip.original
	mv ${TARGET}/bin/bzip2 ${TARGET}/bin/bzip2.original
	chroot ${TARGET} ln -s /usr/bin/pigz /bin/gzip
	chroot ${TARGET} ln -s /usr/bin/pbzip2 /bin/bzip2
	
	touch osinst_base

osinst_install_kernel:   osinst_base

	# if a file based image, install the uefi bits
	#export DEBIAN_FRONTEND=noninteractive ; chroot ${TARGET} apt-get -y \
	#	install systemd-boot systemd-ukify

	# install kernel using a helper script, as Makefile's 
	# quoting/control flow and assignment is insane  
	cp -fv OS/ubuntu24.04/install_kernel.bash scripts/get_kver.bash ${TARGET}/root
	chmod +x ${TARGET}/root/install_kernel.bash
	chroot ${TARGET} /root/install_kernel.bash

	chroot ${TARGET} groupadd stapusr
	chroot ${TARGET} groupadd Debian-exim

	export DEBIAN_FRONTEND=noninteractive ; chroot ${TARGET} apt-get -y \
  		install 			\
  			initramfs-tools \
  			libgtk2.0-dev \
  			libslang2-dev \
  			libperl-dev \
  			libelf-dev \
  			python-dev-is-python3 \
  			libiberty-dev \
  			libdw-dev \
  			binutils-dev \
  			module-assistant \
  			linux-libc-dev \
  			libelf-dev

	
	echo "scsi_mod" >> ${TARGET}/etc/initramfs-tools/modules
	echo "md_mod"   >> ${TARGET}/etc/initramfs-tools/modules
	echo "sg"       >> ${TARGET}/etc/initramfs-tools/modules
	echo "ses"      >> ${TARGET}/etc/initramfs-tools/modules
	echo "raid1"    >> ${TARGET}/etc/initramfs-tools/modules

	echo "igb"      >> ${TARGET}/etc/initramfs-tools/modules
	echo "i40e"     >> ${TARGET}/etc/initramfs-tools/modules
	echo "ixgbe"    >> ${TARGET}/etc/initramfs-tools/modules
	echo "mlx5_ib"  >> ${TARGET}/etc/initramfs-tools/modules
	echo "mlx5_core">> ${TARGET}/etc/initramfs-tools/modules
	echo "zram"     >> ${TARGET}/etc/initramfs-tools/modules
	echo "virtio"     	>> ${TARGET}/etc/initramfs-tools/modules
	echo "virtio_blk"   >> ${TARGET}/etc/initramfs-tools/modules
	echo "virtio_pci"   >> ${TARGET}/etc/initramfs-tools/modules
	echo "virtio_scsi"  >> ${TARGET}/etc/initramfs-tools/modules
	echo "virtio_console"		>> ${TARGET}/etc/initramfs-tools/modules
	echo "virtio_net"   >> ${TARGET}/etc/initramfs-tools/modules
	echo "vfio"     		>> ${TARGET}/etc/initramfs-tools/modules
	echo "vfio_pci"     >> ${TARGET}/etc/initramfs-tools/modules
	echo "vfio_pci_core"     >> ${TARGET}/etc/initramfs-tools/modules
	echo "vfio_iommu_type1" >> ${TARGET}/etc/initramfs-tools/modules
	echo "vfio_virqfd"     >> ${TARGET}/etc/initramfs-tools/modules
	echo "nvme-core" >> ${TARGET}/etc/initramfs-tools/modules
	echo "nvme-fabrics" >> ${TARGET}/etc/initramfs-tools/modules
	echo "nvme-rdma" >> ${TARGET}/etc/initramfs-tools/modules
	echo "nvme-tcp" >> ${TARGET}/etc/initramfs-tools/modules
	echo "nvme" >> ${TARGET}/etc/initramfs-tools/modules
	echo "iscsi_tcp" >> ${TARGET}/etc/initramfs-tools/modules
	echo "libiscsi_tcp" >> ${TARGET}/etc/initramfs-tools/modules
	echo "libiscsi" >> ${TARGET}/etc/initramfs-tools/modules
	echo "scsi_transport_iscsi" >> ${TARGET}/etc/initramfs-tools/modules

	touch osinst_install_kernel

osinst_fs: osinst_install_kernel
	# core environment: file systems
	echo "+++ in fs "
	export DEBIAN_FRONTEND=noninteractive ; chroot ${TARGET} apt-get -y \
	--fix-missing install xfsprogs xfsdump e2fsprogs dosfstools 		\
	exfatprogs nfs-kernel-server nfswatch libaio-dev squashfuse 	\
	squashfs-tools-ng fuse3 fuse2fs  fuse-overlayfs fuseiso

	touch osinst_fs


osinst_block: osinst_fs
# core environment: block device tools

	echo "+++ in blocktools "
	export DEBIAN_FRONTEND=noninteractive ; chroot ${TARGET} apt-get -y  \
		--fix-missing install lsscsi sdparm open-iscsi parted \
		disktype sg3-utils lvm2 dmsetup dmsetup dmraid dmeventd      \
		cryptmount gdisk cryptsetup-bin cryptsetup nvme-cli  	     \
		parted debootstrap
	touch osinst_block


osinst_monitoring: osinst_block
	# core environment: monitoring tools

	echo "+++ in montools"
	export DEBIAN_FRONTEND=noninteractive ; chroot ${TARGET} apt-get -y  \
		--fix-missing install  htop dstat strace ltrace sysstat nmon \
		smemstat procinfo smartmontools array-info iotop glances nmon	\
		cbm  netdata pipemeter bpftrace btm

	touch osinst_monitoring


osinst_loadgen:	osinst_monitoring
	# core environment: loadgen tools
	echo "+++ in loadgen "
	export DEBIAN_FRONTEND=noninteractive ; chroot ${TARGET} apt-get -y \
	 --fix-missing install iperf3 iperf fio hping3 dbench tcpbench \
		stress sockperf netperf netstress lmbench hyperfine

	touch osinst_loadgen


osinst_network: 	osinst_loadgen
	# core environment: networking tools
	echo "+++ in nettools "
	export DEBIAN_FRONTEND=noninteractive ; chroot ${TARGET} apt-get -y  	\
		--fix-missing install links lynx tcpdump elinks       				\
		vnstat bwm-ng   snmpd snmptrapd lldpd ifstat iptraf   				\
		iperf netcat-traditional  iproute2 wireguard wireguard-tools 		\
		openvpn inetutils-tools net-tools
	chroot ${TARGET} systemctl disable lldpd
	#chroot ${TARGET} systemctl disable openvswitch-switch
	chroot ${TARGET} systemctl enable chrony
	#chroot ${TARGET} systemctl stop lldpd
	touch osinst_network

osinst_rdma:	osinst_network
	echo "+++ in rdma "
	apt-get install -y      \
	        ibutils         \
	        ibverbs-utils   \
	        infiniband-diags \
	        rdmacm-utils    \
	        rdma-core       \
	        libibumad-dev   \
	        libibverbs-dev  \
	        libibmad-dev    \
	        librdmacm-dev   \
	        perftest 	\
			qperf		\
			libfabric1	\
			libfabric-bin   
	touch osinst_rdma


osinst_dev:	osinst_rdma

	echo "+++ in devtools "
	export DEBIAN_FRONTEND=noninteractive ; chroot ${TARGET} apt-get -y \
		--fix-missing install build-essential libuuid1 pkg-config    	\
		git libwww-perl libhttp-tiny-perl libhttp-lite-perl	  			\
		libhtml-linkextractor-perl liburi-perl liburi-fetch-perl     	\
		liburi-encode-perl libelf1 libipc-run-perl flex bison			\
		gfortran readline-common liblz-dev cmake libtool autoconf    	\
		automake libelf-dev tmux screen libdrm-dev libsystemd-dev 		

	cp -fv bin/zellij ${TARGET}/usr/local/bin
	mkdir -p ${TARGET}/root/.config/zellij
	cp -fv config/config.kdl ${TARGET}/root/.config/zellij
	touch osinst_dev


osinst_utils: osinst_dev
	export DEBIAN_FRONTEND=noninteractive ; chroot ${TARGET} apt-get -y  \
		--fix-missing install 
	touch osinst_utils


osinst_task: osinst_network osinst_monitoring osinst_loadgen \
  	     osinst_dev osinst_block osinst_utils osinst_fs

	touch osinst_task


osinst_hvm: osinst_task
	# kvm
	export DEBIAN_FRONTEND=noninteractive ; chroot ${TARGET} apt-get -y install \
		qemu-kvm libvirt-clients libvirt-daemon-system
	touch osinst_hvm


osinst_containers: osinst_hvm
	export DEBIAN_FRONTEND=noninteractive ; chroot ${TARGET} apt-get -y install \
		docker.io docker-compose-v2   
	touch osinst_containers

osinst_off:	osinst_containers

#	chroot ${TARGET} systemctl disable exim4
#	chroot ${TARGET} systemctl stop exim4
	touch osinst_off

osinst_gpu: osinst_off
	export DEBIAN_FRONTEND=noninteractive ; chroot ${TARGET} apt-get -y install \
		nvtop

	# grab the amdgpu_top from its place at github
	cd ${TARGET}/root ; \
		wget https://github.com/Umio-Yasuno/amdgpu_top/releases/download/v0.10.4/amdgpu-top_0.10.4-1_amd64.deb ;\
		export DEBIAN_FRONTEND=noninteractive ; chroot ${TARGET} apt-get -y  \
		install /root/amdgpu-top_0.10.4-1_amd64.deb ;\
		rm -f /root/amdgpu-top_0.10.4-1_amd64.deb

	touch osinst_gpu

osinst_clean: osinst_gpu
	export DEBIAN_FRONTEND=noninteractive ; chroot ${TARGET} apt-get -y    \
		clean all
	rm -f ${TARGET}/{prepare.bash,gen_interfaces.pl}

	rm -rf ${TARGET}/var/cache/apt
	mkdir ${TARGET}/var/cache/apt
	touch osinst_clean
